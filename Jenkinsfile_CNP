#!groovy
import uk.gov.hmcts.contino.GithubAPI

@Library("Infrastructure")

String product = "prl"
String component = "ccd-definitions"

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def secrets = [
        's2s-${env}'      : [
                secret('microservicekey-ccd-data', 'DATA_STORE_S2S_KEY'),
                secret('microservicekey-ccd-definition', 'DEFINITION_STORE_S2S_KEY'),
                secret('microservicekey-ccd-gw', 'API_GATEWAY_S2S_KEY'),
                secret('microservicekey-ccd-ps', 'PRINT_S2S_KEY'),
                secret('microservicekey-ccd-admin', 'ADMIN_S2S_KEY')
        ],
        'prl-${env}'      : [
                secret('legalprofessional-testuser-one', 'LEGALPROFESSIONAL_TESTUSER_ONE'),
                secret('legalprofessional-respondent-testuser', 'LEGALPROFESSIONAL_RESPONDENT_TESTUSER'),
                secret('legalprofessional-testpassword-one', 'LEGALPROFESSIONAL_TESTPASSWORD_ONE'),
                secret('courtadmin-testuser-one', 'COURTADMIN_TESTUSER_ONE'),
                secret('courtadmin-swansea-testuser', 'COURTADMIN_SWANSEA_TESTUSER'),
                secret('judge-testuser-one', 'JUDGE_TESTUSER_ONE'),
                secret('judge-testpassword', 'JUDGE_TESTPASSWORD'),
                secret('casemanager-testuser', 'CASEMANAGER_TESTUSER'),
                secret('old-courtadmin-testuser', 'OLDCOURTADMIN_TESTUSER_ONE'),
                secret('old-courtadmin-testuser', 'OLDCOURTADMIN_TESTUSER_ONE'),
                secret('ccd-datastore-client-id', 'CCD_DATASTORE_client_id'),
                secret('ccd-datastore-client-secret', 'CCD_DATASTORE_client_secret'),
                secret('ccd-datastore-username', 'CCD_DATASTORE_username'),
                secret('ccd-datastore-password', 'CCD_DATASTORE_password'),
                secret('prl-cos-idam-client-secret', 'PRL_S2S_SECRET')
        ],
        'ccd-${env}'      : [
                secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN'),
                secret('ccd-api-gateway-oauth2-client-secret', 'API_GATEWAY_IDAM_SECRET'),
                secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
                secret('idam-data-store-client-secret','IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET'),
                secret('idam-data-store-system-user-username','IDAM_DATA_STORE_SYSTEM_USER_USERNAME'),
                secret('idam-data-store-system-user-password','IDAM_DATA_STORE_SYSTEM_USER_PASSWORD'),
                secret('ccd-case-document-am-api-s2s-secret', 'CCD_CASE_DOCUMENT_AM_API_SECRET')
        ],
        'aac-${env}': [
                secret('aac-manage-case-s2s-secret', 'MANAGE_CASE_S2S_KEY'),
                secret('idam-noc-approver-username', 'IDAM_NOC_APPROVER_USERNAME'),
                secret('idam-noc-approver-password', 'IDAM_NOC_APPROVER_PASSWORD'),
                secret('notify-mca-api-key-secret', 'NOTIFY_MCA_API_KEY'),
                secret('idam-mca-client-secret', 'IDAM_MCA_CLIENT_SECRET'),
                secret('idam-mca-system-user-username', 'IDAM_CAA_USERNAME'),
                secret('idam-mca-system-user-password', 'IDAM_CAA_PASSWORD')
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

def checkForEnableTestsLabel(branch_name) {
  return new GithubAPI(this).getLabelsbyPattern(branch_name, "enable-prl-e2e-tests").contains("enable-prl-e2e-tests")
}

def deployWADmns() {
  def githubApi = new GithubAPI(this)

  def waStandaloneBranch = "master"
  // For testing DMNs, change this to the branch on the DMN repo, but ensure it is changed back to master before merging
  def dmnBranch = "master"

  echo "Checking if we should use WA"
  if (githubApi.checkForLabel(env.BRANCH_NAME, 'pr-values:wa')) {
    env.SERVICES_WORK_ALLOCATION_TASK_API = "http://prl-ccd-definitions-pr-${CHANGE_ID}-wa-task-management-api"
    env.SERVICES_WA_WORKFLOW_API_URL = "http://prl-ccd-definitions-pr-${CHANGE_ID}-wa-workflow-api"
    env.WA_SUPPORTED_JURISDICTIONS = "PRIVATELAW"
    env.ENABLE_WA = true
    echo "WA enabled, loading DMNs"
    sh """
        eval \$(./bin/variables/load-preview-environment-variables.sh ${CHANGE_ID})
        ./bin/pull-latest-dmn-files.sh ${dmnBranch}
        ./bin/pull-camunda-bpmn-files.sh ${waStandaloneBranch}
        ./bin/import-dmn-diagram.sh . privatelaw fpl
        """
  } else {
    env.ENABLE_WA = false
  }
}

withPipeline("nodejs", product, component) {
  loadVaultSecrets(secrets)
  enableHighLevelDataSetup()

  onPR{
    env.ENVIRONMENT="preview"
  }
  onMaster{
    env.ENVIRONMENT="aat"
  }


  before('highleveldatasetup') {
    yarnBuilder.yarn('setup')
    onPR{
      env.DEFINITION_STORE_URL_BASE = "https://ccd-definition-store-prl-ccd-definitions-pr-${CHANGE_ID}.preview.platform.hmcts.net"
      env.CCD_DEF_COS_URL="http://prl-ccd-definitions-pr-${CHANGE_ID}-java"
      env.CCD_DEF_CCD_URL="http://prl-ccd-definitions-pr-${CHANGE_ID}-ccd-data-store-api"
      env.CCD_DEF_AAC_URL="http://prl-ccd-definitions-pr-${CHANGE_ID}-aac-manage-case-assignment"
      env.CCD_ADMIN_URL="https://admin-web-prl-ccd-definitions-pr-${CHANGE_ID}.preview.platform.hmcts.net"
      env.XUI_WEB_URL="https://xui-prl-ccd-definitions-pr-${CHANGE_ID}.preview.platform.hmcts.net"
      env.CCD_FILE_NAME="ccd-config-PRL-preview.xlsx"
      env.SERVICE_AUTH_PROVIDER_API_BASE_URL="http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
      env.IDAM_API_BASE_URL="https://idam-api.aat.platform.hmcts.net"
      env.CCD_IDAM_REDIRECT_URL="https://ccd-case-management-web-aat.service.core-compute-aat.internal/oauth2redirect"
      env.CCD_DEFINITION_STORE_API_BASE_URL="https://ccd-definition-store-prl-ccd-definitions-pr-${CHANGE_ID}.preview.platform.hmcts.net"
      env.ROLE_ASSIGNMENT_URL="https://am-role-assignment-service-prl-ccd-definitions-pr-${CHANGE_ID}.preview.platform.hmcts.net"
      env.CAMUNDA_BASE_URL="https://camunda-prl-ccd-definitions-pr-${CHANGE_ID}.preview.platform.hmcts.net"

    }
    onMaster{
      env.CCD_ADMIN_URL="https://ccd-admin-web.aat.platform.hmcts.net"
      env.XUI_WEB_URL="https://manage-case.aat.platform.hmcts.net"
      env.XUI_ORG_WEB_URL="https://manage-org.aat.platform.hmcts.net"
      env.CCD_FILE_NAME="ccd-config-PRL-aat.xlsx"
    }
    stageWithAgent('Generate Family Private Law Case config - all', product) {
      yarnBuilder.yarn('generate-excel-all')
    }

  }

  before('smoketest:preview') {
    yarnBuilder.yarn('playwrightsetup')
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'definitions/**/xlsx/*.xlsx'

    sh """
      ./bin/add-role-assignments.sh
    """

    deployWADmns()
  }

  afterAlways('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-output/**'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**'
  }

  before('smoketest:aat') {
    yarnBuilder.yarn('playwrightsetup')
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'definitions/**/xlsx/*.xlsx'
  }

  afterAlways('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-output/**'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**'
  }

  before('functionalTest:preview') {
    if (checkForEnableTestsLabel(env.BRANCH_NAME)) {
      env.PRL_CCD_DEF_URL = "https://xui-prl-ccd-definitions-pr-${CHANGE_ID}.preview.platform.hmcts.net/cases"
      build job: 'HMCTS_j_to_z/prl-e2e-tests/master', wait: true, propogate: true, parameters: [booleanParam(name: "skipCitizenTests", value: true), string(name: "MANAGE_CASES_BASE_URL", value: env.PRL_CCD_DEF_URL)]
    } else {
    echo "Skipping Functional Tests: 'enable-prl-e2e-tests' label is absent"
    }
  }

  afterAlways('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**'
  }
  before('functionalTest:aat') {
    build job: 'HMCTS_j_to_z/prl-e2e-tests/master', wait: true, propogate: true, parameters: [booleanParam(name: "skipCitizenTests", value: true)]
  }
  afterAlways('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**'
  }
}
