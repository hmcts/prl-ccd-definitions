#!groovy

properties([
    pipelineTriggers([cron('H 07 * * 1-5')]),
    parameters([
        string(name: 'env', defaultValue: 'aat', description: 'env var for pipeline to get secrets  from vault to test'),
        string(name: 'ENVIRONMENT', defaultValue: 'aat', description: 'Environment to test'),
        string(name: 'XUI_WEB_URL', defaultValue: 'https://manage-case.aat.platform.hmcts.net', description: 'The URL you want to run solicitor tests against'),
    ])
])

@Library("Infrastructure")

String product = "prl"
String component = "ccd-definitions"
def channel = '#prl-tech-notifications'

// SAUCELABS config - configured on Jenkins
env.SAUCE_TUNNEL_IDENTIFIER = 'reformtunnel'

def secrets = [
        's2s-${env}'      : [
                secret('microservicekey-ccd-data', 'DATA_STORE_S2S_KEY'),
                secret('microservicekey-ccd-definition', 'DEFINITION_STORE_S2S_KEY'),
                secret('microservicekey-ccd-gw', 'API_GATEWAY_S2S_KEY'),
                secret('microservicekey-ccd-ps', 'PRINT_S2S_KEY'),
                secret('microservicekey-ccd-admin', 'ADMIN_S2S_KEY')
        ],
        'prl-demo'      : [
                secret('legalprofessional-testuser-one', 'LEGALPROFESSIONAL_TESTUSER_ONE'),
                secret('legalprofessional-respondent-testuser', 'LEGALPROFESSIONAL_RESPONDENT_TESTUSER'),
                secret('legalprofessional-testpassword-one', 'LEGALPROFESSIONAL_TESTPASSWORD_ONE'),
                secret('courtadmin-testuser-one', 'COURTADMIN_TESTUSER_ONE'),
                secret('courtadmin-swansea-testuser', 'COURTADMIN_SWANSEA_TESTUSER'),
                secret('judge-testuser-one', 'JUDGE_TESTUSER_ONE'),
                secret('judge-testpassword', 'JUDGE_TESTPASSWORD'),
                secret('casemanager-testuser', 'CASEMANAGER_TESTUSER'),
                secret('old-courtadmin-testuser', 'OLDCOURTADMIN_TESTUSER_ONE')
        ],
        'ccd-${env}'      : [
                secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN'),
                secret('ccd-api-gateway-oauth2-client-secret', 'API_GATEWAY_IDAM_SECRET'),
                secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
                secret('idam-data-store-client-secret','IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET'),
                secret('idam-data-store-system-user-username','IDAM_DATA_STORE_SYSTEM_USER_USERNAME'),
                secret('idam-data-store-system-user-password','IDAM_DATA_STORE_SYSTEM_USER_PASSWORD'),
                secret('ccd-case-document-am-api-s2s-secret', 'CCD_CASE_DOCUMENT_AM_API_SECRET')
        ]
      
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withNightlyPipeline("nodejs", product, component) {
    env.TEST_URL = params.XUI_WEB_URL
    env.test_environment = params.RUNNING_ENV
    env.TESTS_FOR_ACCESSIBILITY = true

    loadVaultSecrets(secrets)
    enableSlackNotifications(channel)
    enableFullFunctionalTest(200)
    // enableCrossBrowserTest(['chrome', 'firefox','microsoft'])
    enableCrossBrowserTest(60)

    afterAlways('fullFunctionalTest') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test/functional/output/**/*'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
    }

    before('crossBrowserTest') {}

    afterAlways('crossBrowserTest') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
    }
}