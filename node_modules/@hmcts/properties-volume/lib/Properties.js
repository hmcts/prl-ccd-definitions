"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nodejs_logging_1 = require("@hmcts/nodejs-logging");
const path = require("path");
const fs = require("fs");
const { merge } = require('lodash');
const log = nodejs_logging_1.Logger.getLogger('applicationRunner');
const defaultOptions = {
    mountPoint: '/mnt/secrets/',
    failOnError: false
};
function addTo(config, givenOptions) {
    const options = merge({}, defaultOptions, givenOptions || {});
    const mountPoint = options.mountPoint;
    const failOnError = options.failOnError;
    log.info(`Attempting to read properties from volume: '${mountPoint}'`);
    try {
        const prefix = getPrefix(mountPoint.toString());
        const properties = readVaults(mountPoint);
        config[prefix] = merge(config[prefix] || {}, properties);
    }
    catch (error) {
        if (failOnError) {
            throw Error(`properties-volume failed with:'${error}`);
        }
        const localError = error;
        if (localError && localError.code && localError.code === 'ENOENT') {
            log.info("Could not find properties to load, check your config, you can ignore this if you don't expect any");
        }
        else {
            log.info(`Could not read properties from volume: '${mountPoint}' due to '${error}'`);
        }
    }
    return config;
}
exports.addTo = addTo;
function getPrefix(aPath) {
    const prefixFolder = path.basename(aPath);
    if (prefixFolder.length === 0) {
        throw new Error(`Invalid properties mount point supplied: '${aPath}'`);
    }
    return prefixFolder;
}
function addDir(dir, obj, mountPoint) {
    obj[dir] = readDirectories(mountPoint, dir).reduce((values, file) => addFile(values, file, mountPoint, dir), {});
    return obj;
}
function addFile(values, file, mountPoint, dir) {
    const path = readFile(mountPoint, dir, file);
    if (path) {
        values[file] = path.trim();
    }
    return values;
}
function readFile(mountPoint, dir, file) {
    const path = mountPoint + '/' + dir + '/' + file;
    if (!fs.statSync(path).isDirectory()) {
        return fs.readFileSync(path, 'utf8');
    }
}
function readDirectories(mountPoint, dir) {
    return fs.readdirSync(mountPoint + '/' + dir);
}
function readVaults(mountPoint) {
    return fs.readdirSync(mountPoint, null).reduce((obj, dir) => addDir(dir, obj, mountPoint), {});
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvcGVydGllcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9Qcm9wZXJ0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMERBQThDO0FBQzlDLDZCQUE0QjtBQUM1Qix5QkFBd0I7QUFFeEIsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUVuQyxNQUFNLEdBQUcsR0FBRyx1QkFBTSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO0FBRWpELE1BQU0sY0FBYyxHQUFZO0lBQzlCLFVBQVUsRUFBRSxlQUFlO0lBQzNCLFdBQVcsRUFBRSxLQUFLO0NBQ25CLENBQUE7QUFFRCxlQUF1QixNQUFXLEVBQUUsWUFBc0I7SUFDeEQsTUFBTSxPQUFPLEdBQVksS0FBSyxDQUFDLEVBQUUsRUFBRSxjQUFjLEVBQUUsWUFBWSxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBQ3RFLE1BQU0sVUFBVSxHQUFnQixPQUFPLENBQUMsVUFBVyxDQUFBO0lBQ25ELE1BQU0sV0FBVyxHQUFZLE9BQU8sQ0FBQyxXQUFZLENBQUE7SUFFakQsR0FBRyxDQUFDLElBQUksQ0FBQywrQ0FBK0MsVUFBVSxHQUFHLENBQUMsQ0FBQTtJQUN0RSxJQUFJO1FBQ0YsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBQy9DLE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUN6QyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUE7S0FDekQ7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNkLElBQUksV0FBVyxFQUFFO1lBQ2YsTUFBTSxLQUFLLENBQUMsa0NBQWtDLEtBQUssRUFBRSxDQUFDLENBQUE7U0FDdkQ7UUFDRCxNQUFNLFVBQVUsR0FBUSxLQUFLLENBQUE7UUFDN0IsSUFBSSxVQUFVLElBQUksVUFBVSxDQUFDLElBQUksSUFBSSxVQUFVLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUNqRSxHQUFHLENBQUMsSUFBSSxDQUFDLG1HQUFtRyxDQUFDLENBQUE7U0FDOUc7YUFBTTtZQUNMLEdBQUcsQ0FBQyxJQUFJLENBQUMsMkNBQTJDLFVBQVUsYUFBYSxLQUFLLEdBQUcsQ0FBQyxDQUFBO1NBQ3JGO0tBQ0Y7SUFDRCxPQUFPLE1BQU0sQ0FBQTtBQUNmLENBQUM7QUF0QkQsc0JBc0JDO0FBRUQsbUJBQW9CLEtBQWE7SUFDL0IsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN6QyxJQUFJLFlBQVksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMsNkNBQTZDLEtBQUssR0FBRyxDQUFDLENBQUE7S0FDdkU7SUFDRCxPQUFPLFlBQVksQ0FBQTtBQUNyQixDQUFDO0FBRUQsZ0JBQWlCLEdBQVcsRUFBRSxHQUFRLEVBQUUsVUFBdUI7SUFDN0QsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ2hILE9BQU8sR0FBRyxDQUFBO0FBQ1osQ0FBQztBQUVELGlCQUFrQixNQUFXLEVBQUUsSUFBWSxFQUFFLFVBQXVCLEVBQUUsR0FBVztJQUMvRSxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUM1QyxJQUFJLElBQUksRUFBRTtRQUNSLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDM0I7SUFDRCxPQUFPLE1BQU0sQ0FBQTtBQUNmLENBQUM7QUFFRCxrQkFBbUIsVUFBdUIsRUFBRSxHQUFXLEVBQUUsSUFBWTtJQUNuRSxNQUFNLElBQUksR0FBRyxVQUFVLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFBO0lBQ2hELElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFO1FBQ3BDLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7S0FDckM7QUFDSCxDQUFDO0FBRUQseUJBQTBCLFVBQXVCLEVBQUUsR0FBVztJQUM1RCxPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsVUFBVSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQTtBQUMvQyxDQUFDO0FBRUQsb0JBQXFCLFVBQXVCO0lBQzFDLE9BQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFDaEcsQ0FBQyJ9